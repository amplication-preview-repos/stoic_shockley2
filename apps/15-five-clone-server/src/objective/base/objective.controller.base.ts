/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ObjectiveService } from "../objective.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ObjectiveCreateInput } from "./ObjectiveCreateInput";
import { Objective } from "./Objective";
import { ObjectiveFindManyArgs } from "./ObjectiveFindManyArgs";
import { ObjectiveWhereUniqueInput } from "./ObjectiveWhereUniqueInput";
import { ObjectiveUpdateInput } from "./ObjectiveUpdateInput";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { KeyResultWhereUniqueInput } from "../../keyResult/base/KeyResultWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ObjectiveControllerBase {
  constructor(
    protected readonly service: ObjectiveService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Objective })
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createObjective(
    @common.Body() data: ObjectiveCreateInput
  ): Promise<Objective> {
    return await this.service.createObjective({
      data: data,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        dueDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Objective] })
  @ApiNestedQuery(ObjectiveFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async objectives(@common.Req() request: Request): Promise<Objective[]> {
    const args = plainToClass(ObjectiveFindManyArgs, request.query);
    return this.service.objectives({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        dueDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Objective })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async objective(
    @common.Param() params: ObjectiveWhereUniqueInput
  ): Promise<Objective | null> {
    const result = await this.service.objective({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        dueDate: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Objective })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateObjective(
    @common.Param() params: ObjectiveWhereUniqueInput,
    @common.Body() data: ObjectiveUpdateInput
  ): Promise<Objective | null> {
    try {
      return await this.service.updateObjective({
        where: params,
        data: data,
        select: {
          createdAt: true,
          createdBy: true,
          description: true,
          dueDate: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Objective })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteObjective(
    @common.Param() params: ObjectiveWhereUniqueInput
  ): Promise<Objective | null> {
    try {
      return await this.service.deleteObjective({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,
          description: true,
          dueDate: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/keyResults")
  @ApiNestedQuery(KeyResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "KeyResult",
    action: "read",
    possession: "any",
  })
  async findKeyResults(
    @common.Req() request: Request,
    @common.Param() params: ObjectiveWhereUniqueInput
  ): Promise<KeyResult[]> {
    const query = plainToClass(KeyResultFindManyArgs, request.query);
    const results = await this.service.findKeyResults(params.id, {
      ...query,
      select: {
        createdAt: true,
        createdBy: true,
        description: true,
        dueDate: true,
        id: true,

        objective: {
          select: {
            id: true,
          },
        },

        status: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/keyResults")
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "update",
    possession: "any",
  })
  async connectKeyResults(
    @common.Param() params: ObjectiveWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResults: {
        connect: body,
      },
    };
    await this.service.updateObjective({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/keyResults")
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "update",
    possession: "any",
  })
  async updateKeyResults(
    @common.Param() params: ObjectiveWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResults: {
        set: body,
      },
    };
    await this.service.updateObjective({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/keyResults")
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "update",
    possession: "any",
  })
  async disconnectKeyResults(
    @common.Param() params: ObjectiveWhereUniqueInput,
    @common.Body() body: KeyResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      keyResults: {
        disconnect: body,
      },
    };
    await this.service.updateObjective({
      where: params,
      data,
      select: { id: true },
    });
  }
}
