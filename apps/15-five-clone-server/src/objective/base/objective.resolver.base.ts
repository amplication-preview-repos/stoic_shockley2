/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Objective } from "./Objective";
import { ObjectiveCountArgs } from "./ObjectiveCountArgs";
import { ObjectiveFindManyArgs } from "./ObjectiveFindManyArgs";
import { ObjectiveFindUniqueArgs } from "./ObjectiveFindUniqueArgs";
import { CreateObjectiveArgs } from "./CreateObjectiveArgs";
import { UpdateObjectiveArgs } from "./UpdateObjectiveArgs";
import { DeleteObjectiveArgs } from "./DeleteObjectiveArgs";
import { KeyResultFindManyArgs } from "../../keyResult/base/KeyResultFindManyArgs";
import { KeyResult } from "../../keyResult/base/KeyResult";
import { ObjectiveService } from "../objective.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Objective)
export class ObjectiveResolverBase {
  constructor(
    protected readonly service: ObjectiveService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "read",
    possession: "any",
  })
  async _objectivesMeta(
    @graphql.Args() args: ObjectiveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Objective])
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "read",
    possession: "any",
  })
  async objectives(
    @graphql.Args() args: ObjectiveFindManyArgs
  ): Promise<Objective[]> {
    return this.service.objectives(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Objective, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "read",
    possession: "own",
  })
  async objective(
    @graphql.Args() args: ObjectiveFindUniqueArgs
  ): Promise<Objective | null> {
    const result = await this.service.objective(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Objective)
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "create",
    possession: "any",
  })
  async createObjective(
    @graphql.Args() args: CreateObjectiveArgs
  ): Promise<Objective> {
    return await this.service.createObjective({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Objective)
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "update",
    possession: "any",
  })
  async updateObjective(
    @graphql.Args() args: UpdateObjectiveArgs
  ): Promise<Objective | null> {
    try {
      return await this.service.updateObjective({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Objective)
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "delete",
    possession: "any",
  })
  async deleteObjective(
    @graphql.Args() args: DeleteObjectiveArgs
  ): Promise<Objective | null> {
    try {
      return await this.service.deleteObjective(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [KeyResult], { name: "keyResults" })
  @nestAccessControl.UseRoles({
    resource: "KeyResult",
    action: "read",
    possession: "any",
  })
  async findKeyResults(
    @graphql.Parent() parent: Objective,
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    const results = await this.service.findKeyResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
