/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  KeyResult as PrismaKeyResult,
  Objective as PrismaObjective,
} from "@prisma/client";

export class KeyResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KeyResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.keyResult.count(args);
  }

  async keyResults(
    args: Prisma.KeyResultFindManyArgs
  ): Promise<PrismaKeyResult[]> {
    return this.prisma.keyResult.findMany(args);
  }
  async keyResult(
    args: Prisma.KeyResultFindUniqueArgs
  ): Promise<PrismaKeyResult | null> {
    return this.prisma.keyResult.findUnique(args);
  }
  async createKeyResult(
    args: Prisma.KeyResultCreateArgs
  ): Promise<PrismaKeyResult> {
    return this.prisma.keyResult.create(args);
  }
  async updateKeyResult(
    args: Prisma.KeyResultUpdateArgs
  ): Promise<PrismaKeyResult> {
    return this.prisma.keyResult.update(args);
  }
  async deleteKeyResult(
    args: Prisma.KeyResultDeleteArgs
  ): Promise<PrismaKeyResult> {
    return this.prisma.keyResult.delete(args);
  }

  async getObjective(parentId: string): Promise<PrismaObjective | null> {
    return this.prisma.keyResult
      .findUnique({
        where: { id: parentId },
      })
      .objective();
  }
}
