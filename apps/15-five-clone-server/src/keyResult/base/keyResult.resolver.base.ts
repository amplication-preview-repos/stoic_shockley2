/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { KeyResult } from "./KeyResult";
import { KeyResultCountArgs } from "./KeyResultCountArgs";
import { KeyResultFindManyArgs } from "./KeyResultFindManyArgs";
import { KeyResultFindUniqueArgs } from "./KeyResultFindUniqueArgs";
import { CreateKeyResultArgs } from "./CreateKeyResultArgs";
import { UpdateKeyResultArgs } from "./UpdateKeyResultArgs";
import { DeleteKeyResultArgs } from "./DeleteKeyResultArgs";
import { Objective } from "../../objective/base/Objective";
import { KeyResultService } from "../keyResult.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => KeyResult)
export class KeyResultResolverBase {
  constructor(
    protected readonly service: KeyResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "KeyResult",
    action: "read",
    possession: "any",
  })
  async _keyResultsMeta(
    @graphql.Args() args: KeyResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [KeyResult])
  @nestAccessControl.UseRoles({
    resource: "KeyResult",
    action: "read",
    possession: "any",
  })
  async keyResults(
    @graphql.Args() args: KeyResultFindManyArgs
  ): Promise<KeyResult[]> {
    return this.service.keyResults(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => KeyResult, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "KeyResult",
    action: "read",
    possession: "own",
  })
  async keyResult(
    @graphql.Args() args: KeyResultFindUniqueArgs
  ): Promise<KeyResult | null> {
    const result = await this.service.keyResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KeyResult)
  @nestAccessControl.UseRoles({
    resource: "KeyResult",
    action: "create",
    possession: "any",
  })
  async createKeyResult(
    @graphql.Args() args: CreateKeyResultArgs
  ): Promise<KeyResult> {
    return await this.service.createKeyResult({
      ...args,
      data: {
        ...args.data,

        objective: args.data.objective
          ? {
              connect: args.data.objective,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => KeyResult)
  @nestAccessControl.UseRoles({
    resource: "KeyResult",
    action: "update",
    possession: "any",
  })
  async updateKeyResult(
    @graphql.Args() args: UpdateKeyResultArgs
  ): Promise<KeyResult | null> {
    try {
      return await this.service.updateKeyResult({
        ...args,
        data: {
          ...args.data,

          objective: args.data.objective
            ? {
                connect: args.data.objective,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => KeyResult)
  @nestAccessControl.UseRoles({
    resource: "KeyResult",
    action: "delete",
    possession: "any",
  })
  async deleteKeyResult(
    @graphql.Args() args: DeleteKeyResultArgs
  ): Promise<KeyResult | null> {
    try {
      return await this.service.deleteKeyResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Objective, {
    nullable: true,
    name: "objective",
  })
  @nestAccessControl.UseRoles({
    resource: "Objective",
    action: "read",
    possession: "any",
  })
  async getObjective(
    @graphql.Parent() parent: KeyResult
  ): Promise<Objective | null> {
    const result = await this.service.getObjective(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
