/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CheckInService } from "../checkIn.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CheckInCreateInput } from "./CheckInCreateInput";
import { CheckIn } from "./CheckIn";
import { CheckInFindManyArgs } from "./CheckInFindManyArgs";
import { CheckInWhereUniqueInput } from "./CheckInWhereUniqueInput";
import { CheckInUpdateInput } from "./CheckInUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CheckInControllerBase {
  constructor(
    protected readonly service: CheckInService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CheckIn })
  @nestAccessControl.UseRoles({
    resource: "CheckIn",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCheckIn(
    @common.Body() data: CheckInCreateInput
  ): Promise<CheckIn> {
    return await this.service.createCheckIn({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        checkInDate: true,
        createdAt: true,
        createdBy: true,
        id: true,
        status: true,
        summary: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        weekEnding: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CheckIn] })
  @ApiNestedQuery(CheckInFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CheckIn",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async checkIns(@common.Req() request: Request): Promise<CheckIn[]> {
    const args = plainToClass(CheckInFindManyArgs, request.query);
    return this.service.checkIns({
      ...args,
      select: {
        checkInDate: true,
        createdAt: true,
        createdBy: true,
        id: true,
        status: true,
        summary: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        weekEnding: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CheckIn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CheckIn",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async checkIn(
    @common.Param() params: CheckInWhereUniqueInput
  ): Promise<CheckIn | null> {
    const result = await this.service.checkIn({
      where: params,
      select: {
        checkInDate: true,
        createdAt: true,
        createdBy: true,
        id: true,
        status: true,
        summary: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        weekEnding: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CheckIn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CheckIn",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCheckIn(
    @common.Param() params: CheckInWhereUniqueInput,
    @common.Body() data: CheckInUpdateInput
  ): Promise<CheckIn | null> {
    try {
      return await this.service.updateCheckIn({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          checkInDate: true,
          createdAt: true,
          createdBy: true,
          id: true,
          status: true,
          summary: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          weekEnding: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CheckIn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CheckIn",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCheckIn(
    @common.Param() params: CheckInWhereUniqueInput
  ): Promise<CheckIn | null> {
    try {
      return await this.service.deleteCheckIn({
        where: params,
        select: {
          checkInDate: true,
          createdAt: true,
          createdBy: true,
          id: true,
          status: true,
          summary: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          weekEnding: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
